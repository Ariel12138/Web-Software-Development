## 敏捷需求管理


### 敏捷开发

**什么是敏捷？**

"敏捷"代表的是一种方法，在"以人为核心驱动"的"复杂系统"背景下，一个具有适应性的"经验性过程控制方法"

**敏捷宣言**

个体和互动 高于 流程和工具
工作的软件 高于 详尽的文档
客户合作 高于 合同谈判
响应变化 高于 遵循计划

**敏捷与瀑布的区别**



**持续集成**：开发人员提交代码后，立刻进行构建、（单元）测试。根据测试结果，确认新代码和原有代码能否正确集成在一起。  

**持续交付**：在持续集成的基础上，将继承后的代码部署到更贴近真实运行环境的「类生产环境」中，做更多的测试。测试环境分层，越往下越接近用户真实使用的环境。

**DevOps**：解决开发和运维两个角色之间的协作问题

**Scrum**：3种角色，3种工作，5种仪式（迭代，迭代计划，每日站会，评审会议，迭代回顾），5种价值观

- scrum master：起到教练的指责，领导团队完成scrum的实践以及体现价值观，排除团队遇到的困难……

- Dev Op： 开发团队
- 

**需求**：

**需求拆分**：epic-feature-story-task

**Story** 描述了对于系统或软件的客户或用户有价值的功能片段。由三个方面组成：一个书面的story 简短描述，用来做计划并在开发过程中起到提醒作用；针对story描述进行的交流，用来澄清story的细节；记录和传递细节的测试信息，用来确定story是否开发完成。3C-card, conversation, confirmation.   

**Story如何描述**：作为「角色」as a ，我想要 I want「结果」，以便 so that「原因/价值观」

Feature 和 Story 的区别：feature 是外部可感知的内容，story未必；feature一般是跨迭代的，story在一个迭代内完成；feature针对多角色、多维度、多场景的